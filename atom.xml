<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jhchen3121.github.io</id>
    <title>San Andreas&apos;s Blog</title>
    <updated>2020-08-04T05:08:20.520Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jhchen3121.github.io"/>
    <link rel="self" href="https://jhchen3121.github.io/atom.xml"/>
    <subtitle>问题记录以及分享......</subtitle>
    <logo>https://jhchen3121.github.io/images/avatar.png</logo>
    <icon>https://jhchen3121.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, San Andreas&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[FRP内网穿透（二级域名）]]></title>
        <id>https://jhchen3121.github.io/post/frp-nei-wang-chuan-tou-er-ji-yu-ming</id>
        <link href="https://jhchen3121.github.io/post/frp-nei-wang-chuan-tou-er-ji-yu-ming">
        </link>
        <updated>2020-08-03T13:35:57.000Z</updated>
        <content type="html"><![CDATA[<p>最近部署小程序后台管理端在云服务器，听群里建议frp能够实现内网穿透，通过内网来访问公网IP，一台云服务器即可使本地虚拟机通过公网访问。查阅了frp文档配置了二级域名进行测试，发现可行，以下为配置信息。</p>
<h3 id="云服务器端">云服务器端</h3>
<ol>
<li>首先下载frp对应包，上传至云服务器并解压</li>
<li>编辑frps.ini，内容如下：<pre><code>[common]
 bind_port = 7005(与内网机器通讯端口)
 subdomain_host = xxxx.xx(自己注册的域名)
 vhost_http_port = 8080(http端口)
</code></pre>
</li>
<li>配置完成后执行: <code>./frps -c ./frps.ini &amp;</code></li>
</ol>
<h3 id="内网端">内网端</h3>
<ol>
<li>同样需要frp包，解压</li>
<li>编辑frpc.ini，内容如下：<pre><code>[common]
server_addr = xx.xx.xx.xx(你的云服务器公网ip)
server_port = 7005(与云服务器frp绑定的端口)

[wechat_shop](服务名称可自定，若本地内网存在多个名字不可重复)
type = http
local_ip = 127.0.0.1
local_port = 8878(本地项目服务所需要的端口号)
subdomain = wechat(你的二级域名开头)
</code></pre>
</li>
<li>配置完成后执行： <code>./frpc -c ./frpc.ini &amp;</code></li>
</ol>
<h3 id="解析">解析</h3>
<p>做完以上步骤后需要在你的域名管理端增加二级域名的解析，例如上述我需要增加wechat的二级域名，则增加如下解析：<br>
<img src="https://jhchen3121.github.io/post-images/1596517634363.png" alt=""></p>
<p>做完上述步骤即可在你的内网通过二级域名来访问你的本地项目！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Scrapy框架]]></title>
        <id>https://jhchen3121.github.io/post/scrapy-kuang-jia</id>
        <link href="https://jhchen3121.github.io/post/scrapy-kuang-jia">
        </link>
        <updated>2020-06-20T05:34:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="简介">简介</h3>
<p>Scrapy是一个用于爬网网站并提取结构化数据的应用程序框架，可用于各种有用的应用程序，例如数据挖掘，信息处理或历史档案。</p>
<p>即使Scrapy最初是为Web抓取而设计的，它也可以用于使用API​​（例如Amazon Associates Web Services）或用作通用Web 搜寻器来提取数据。</p>
<h3 id="安装">安装</h3>
<p>最新版本的scrapy框架已经不再对py2提供支持，因此建议在py3上进行框架的搭建，安装执行：</p>
<pre><code>pip install scrapy
</code></pre>
<h3 id="使用">使用</h3>
<h5 id="初始化">初始化</h5>
<p>初始化项目执行：</p>
<pre><code>scrapy startproject (项目名称，以tutorial为例) (绝对路径可有可无，默认在当前路径)
</code></pre>
<p>项目目录如下：</p>
<pre><code>tutorial/
    scrapy.cfg            # deploy configuration file

    tutorial/             # project's Python module, you'll import your code from here
        __init__.py

        items.py          # project items definition file

        middlewares.py    # project middlewares file

        pipelines.py      # project pipelines file

        settings.py       # project settings file

        spiders/          # a directory where you'll later put your spiders
            __init__.py
</code></pre>
<h5 id="demo">demo</h5>
<p>爬虫脚本编写与spiders文件夹下，如下：</p>
<pre><code class="language-python">#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import unicode_literals
from __future__ import absolute_import

import scrapy

class QuotesSpider(scrapy.Spider):
    # 爬虫名称，启动爬虫根据该名称进行指定
    name = 'quotes'
    
    # 初始化请求的url，可不用start_requests，具体见官方文档
    def start_requests(self):

        urls = [ 
            'http://quotes.toscrape.com/page/1/',
        ]   

        for url in urls:
            yield scrapy.Request(url=url, callback=self.parse)

    # 默认的回调方法
    def parse(self, response):

        # 此处通过xpath来解析页面元素，亦可用css等，详见官方文档
        for quote in response.xpath(&quot;&quot;&quot;//div[@class='quote']&quot;&quot;&quot;):
            yield {
                'text': quote.xpath(&quot;&quot;&quot;./span[@class='text']/text()&quot;&quot;&quot;).get(),
                'author': quote.xpath(&quot;&quot;&quot;./span/small[@class='author']/text()&quot;&quot;&quot;).get(),
                'tages': quote.xpath(&quot;&quot;&quot;./div/a[@class='tag']/text()&quot;&quot;&quot;).getall(),
            }   

        next_page = response.xpath(&quot;&quot;&quot;//ul[@class='pager']/li/a/@href&quot;&quot;&quot;).get()

        self.log('-----------------------------')
        self.log(next_page)
        if next_page:
            # url拼接，用同样的parse方法处理下一页的相应内容
            next_page = response.urljoin(next_page)
            yield scrapy.Request(next_page, callback=self.parse)

</code></pre>
<h5 id="运行">运行</h5>
<p>返回至项目的初始目录，执行以下命令来运行爬虫：</p>
<pre><code>scrapy crawl quotes
</code></pre>
<h3 id="api">API</h3>
<p>上述方法讲了如何在scrapy框架中运行一个爬虫，但实际生产中可能是需要通过外部接口调用来进行爬虫的启动，因此通过scrapy框架提供的api来进行爬虫的启动，具体事例代码如下：</p>
<pre><code class="language-python">#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import unicode_literals
from __future__ import absolute_import

from twisted.internet import reactor
from tutorial.spiders.quotes_spider import QuotesSpider
from scrapy.crawler import CrawlerProcess, CrawlerRunner
from scrapy.utils.project import get_project_settings

import os

def main():

    my_spider = QuotesSpider()
    settings = get_project_settings()
    os.environ['SCRAPY_SETTINGS_MODULE'] = 'tutorial.settings'
    settings_module_path = os.environ['SCRAPY_SETTINGS_MODULE']
    settings.setmodule(settings_module_path, priority='project')

    crawler = CrawlerProcess(settings)
    crawler.crawl(QuotesSpider)
    crawler.start()

if __name__ == '__main__':
    main()
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python利用xlwt写入excel保持原模板样式]]></title>
        <id>https://jhchen3121.github.io/post/python-li-yong-xlwt-xie-ru-excel-bao-chi-yuan-mo-ban-yang-shi</id>
        <link href="https://jhchen3121.github.io/post/python-li-yong-xlwt-xie-ru-excel-bao-chi-yuan-mo-ban-yang-shi">
        </link>
        <updated>2019-12-27T11:54:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="说明">说明</h3>
<p>由于默认xlwt包在写入excel时会初始化excel的样式，导致与预期不一致，通过以下方法能够保证原excel的基础样式写入</p>
<h3 id="package">package</h3>
<p>需要三个库：</p>
<ol>
<li>xlrd</li>
<li>xlwt</li>
<li>xlutils</li>
</ol>
<h3 id="写入方法">写入方法</h3>
<p>编写方法函数</p>
<pre><code>def _getOutCell(sheet, colIndex, rowIndex):
    row = sheet._Worksheet__rows.get(rowIndex)
    if not row: return None

    cell = row._Row__cells.get(colIndex)
    return cell

def setOutCell(sheet, col, row, value, data_style=None):
    previousCell = _getOutCell(sheet, col, row)

    if data_style:
        sheet.write(row, col, value, data_style)
    else:
        sheet.write(row, col, value)
    
    if previousCell:
        newCell = _getOutCell(sheet, col, row)
        if newCell: newCell.xf_idx = previousCell.xf_idx
</code></pre>
<h3 id="调用示例">调用示例</h3>
<pre><code>from xlutils.copy import copy
import xlrd
import xlwt

sink_templete = xlrd.open_workbook(path, formatting_info=True)
workbook = copy(sink_templete)

sheet = workbook.get_sheet(0)
setOutCell(sheet, 1, 1, 'test')

workbook.save(new_path)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python虚拟环境配置]]></title>
        <id>https://jhchen3121.github.io/post/python-xu-ni-huan-jing-pei-zhi</id>
        <link href="https://jhchen3121.github.io/post/python-xu-ni-huan-jing-pei-zhi">
        </link>
        <updated>2019-12-27T11:24:20.000Z</updated>
        <content type="html"><![CDATA[<p>各个项目需要进行虚拟环境的配置，如下所示：</p>
<pre><code>#入口参数判断
if [ ! $1 ];then
    PROJ_DIR=`pwd`
else
    PROJ_DIR=$1
fi

VENV=${PROJ_DIR}/.env
#FIXME
PROJ_NAME=(项目名称)

if [ ! -e ${VENV} ];then
    virtualenv --never-download --prompt &quot;(${PROJ_NAME})&quot; ${VENV} -p $(type -p python2.7)
fi

source ${VENV}/bin/activate

export PYTHONPATH=${PROJ_DIR}/server:${PROJ_DIR}/lib:${PROJ_DIR}
export LD_LIBRARY_PATH=${PROJ_DIR}/lib
export LD_PRELOAD=${PROJ_DIR}/lib/hijack.so
export PROJ_NAME
export PROJ_DIR
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vim配置]]></title>
        <id>https://jhchen3121.github.io/post/vim-pei-zhi</id>
        <link href="https://jhchen3121.github.io/post/vim-pei-zhi">
        </link>
        <updated>2019-12-27T11:22:26.000Z</updated>
        <content type="html"><![CDATA[<p>vim配置(python) 在home目录下创建.exrc</p>
<pre><code>:imap jk &lt;Esc&gt;
set tabstop=4
set softtabstop=4
set autoindent
set smartindent
set expandtab
set shiftwidth=4
set smarttab
set hls 
set laststatus=2
syntax on
autocmd FileType make set noexpandtab
autocmd FileType python setlocal et sta sw=4 sts=4
&quot;tab显示为红色
autocmd FileType python match ErrorMsg /\s*\t/
set foldmethod=indent
set foldlevel=99
if has(&quot;autocmd&quot;)
  filetype indent on
endif
filetype plugin on
set ofu=syntaxcomplete#Complete
set number
set ruler
set nolinebreak
set background=light
set showmatch
set autochdir
set shortmess=atI
set shiftround

set t_Co=256
colorscheme desert
hi LineNr ctermfg=245 ctermbg=235
&quot;set cursorline
&quot;hi CursorLine ctermbg=235 cterm=NONE guibg=Grey40
&quot; python文件高亮显示行尾的空格，Tab
&quot;记住上次打开的位置
au BufReadPost * if line(&quot;'\&quot;&quot;) &gt; 0|if line(&quot;'\&quot;&quot;) &lt;= line(&quot;$&quot;)|exe(&quot;norm '\&quot;&quot;)|else|exe &quot;norm $&quot;|endif|endif
&quot; 退出粘贴模式
au InsertLeave * set nopaste
&quot; vue高亮，继承html
au BufRead,BufNewFile *.vue set filetype=html
auto BufNewFile *.py call PythonHeader()
func PythonHeader()
    call setline(1, &quot;#!/usr/bin/env python&quot;)
    call append(1, &quot;# -*- coding: utf-8 -*-&quot;)
    call append(2, &quot;&quot;)
    call append(3, &quot;from __future__ import unicode_literals&quot;)
    call append(4, &quot;from __future__ import absolute_import&quot;)
endf
noremap &lt;F1&gt; &lt;Esc&gt;
noremap &lt;F2&gt;  :set number!&lt;CR&gt;
nnoremap &lt;F3&gt; :set list!&lt;CR&gt;
&quot; 关闭上下左右按键
map &lt;Left&gt; &lt;Nop&gt;
map &lt;Right&gt; &lt;Nop&gt;
map &lt;Up&gt; &lt;Nop&gt;
map &lt;Down&gt; &lt;Nop&gt;
&quot; press space to fold/unfold code
nnoremap &lt;space&gt; za
vnoremap &lt;space&gt; zf
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[tmux配置]]></title>
        <id>https://jhchen3121.github.io/post/tmux-pei-zhi</id>
        <link href="https://jhchen3121.github.io/post/tmux-pei-zhi">
        </link>
        <updated>2019-12-27T11:19:13.000Z</updated>
        <content type="html"><![CDATA[<p>tmux个人使用配置，在home目录下创建.tmux.conf</p>
<pre><code># base settings
set -g default-terminal &quot;screen-256-color&quot;
set -g terminal-override &quot;,rxvt-unicode-256-color:Tc&quot;
set -g base-index 1
set -g pane-base-index 1
set -g status-interval 1
set -g status-keys vi
# prefix key
set-option -g prefix C-a 
unbind-key C-b 
bind-key C-a send-prefix
bind-key -n F5 prev
bind-key -n F6 next
# bindkeys
setw -g mode-keys vi
setw -g automatic-rename on
setw -g allow-rename on
#split window
unbind '&quot;' 
bind - splitw -v
unbind %
bind | splitw -h
#select pane
bind k selectp -U
bind j selectp -D
bind h selectp -L
bind l selectp -R
set -g history-limit 65535
set -g base-index 1
set -g pane-base-index 1

set -g default-terminal xterm
set -g status-bg black
set -g status-fg white
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-selection
set-window-option -g window-status-current-bg blue
set-window-option -g window-status-format '#[dim]#I:#[default]#W#[fg=grey,dim]'
set-window-option -g window-status-current-format '#[fg-cyan,bold]#I#[fg=blue]:#[fg=cyan]#W#[fg=dim]'
set -g status-right '#[fg=green][#[fg=cyan]%Y-%m-%d %H:%M:%S#[fg=green]]'
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[OGG数据同步]]></title>
        <id>https://jhchen3121.github.io/post/ogg-sjtb</id>
        <link href="https://jhchen3121.github.io/post/ogg-sjtb">
        </link>
        <updated>2019-12-21T03:08:03.000Z</updated>
        <content type="html"><![CDATA[<h1 id="通过oracle-goldengate-同步数据到kudu">通过Oracle GoldenGate 同步数据到KUDU</h1>
<h2 id="环境配置">环境配置</h2>
<p><strong>源机器信息：</strong></p>
<p>OS: CentOS 6.8 x86_64</p>
<p>Oracle: 11.2.1.0.0</p>
<p>GoldenGate:  Oracle GoldenGate V11.2.1.0.3 for Oracle 11g on Linux x86-64</p>
<p>机器名: db1<br>
Public IP: 172.16.20.14</p>
<p>Internet IP：10.1.6.3</p>
<h5 id="目标机器信息">目标机器信息：</h5>
<p>OS: CentOS 6.8 x86_64</p>
<p>GoldenGate: Oracle GoldenGate for Big Data 12.3.1.1.1 on Linux x86-64</p>
<p>机器名: app01<br>
Public IP: 172.16.20.29</p>
<p>Internet IP：10.1.6.11</p>
<h2 id="配置目标机器与源机器免密互通">配置目标机器与源机器免密互通</h2>
<ol>
<li>
<p>源机器创建ogg用户<code>useradd ogg</code></p>
</li>
<li>
<p>目标机器创建ggs用户<code>useradd ggs</code></p>
</li>
<li>
<p>执行<code>ssh-keygen -t rsa</code>生成对应的公钥,把各自<sub>/.ssh/id_rsa.pub的内容复制到</sub>/.ssh/authorized_keys中</p>
</li>
<li>
<p><code>vi /etc/hosts</code> 编辑内容</p>
<pre><code>127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6

10.1.6.3 db1
10.1.6.11 app01
</code></pre>
</li>
</ol>
<h2 id="源机器安装goldengate">源机器安装GoldenGate</h2>
<ol>
<li>
<p>在edelivery.oracle.com上下载 Oracle GoldenGate V11.2.1.0.3 V34339-01.zip</p>
</li>
<li>
<p>创建ogg用户，解压V34339-01.zip到ogg用户目录下</p>
</li>
<li>
<p>解压fbo_ggs_Linux_x64_ora11g_64bit.tar</p>
</li>
<li>
<p>把$ORACLE_HOME添加至环境变量，编辑~/.bash_profile</p>
<pre><code>export PATH
export ORACLE_BASE=/u01/oracle/app/oracle
export ORACLE_HOME=/u01/oracle/app/oracle/product/11.2.0/db_1
export LD_LIBRARY_PATH=$ORACLE_HOME/lib
export NLS_LANG=AMERICAN_AMERICA.UTF8
export PATH=$PATH:$ORACLE_HOME/bin
export LD_LIBRARY_PATH=$ORACLE_CLNT/lib:$ORACLE_HOME/lib:$LD_LIBRARY_PATH
export NLS_CALENDAR=GREGORIAN
export NLS_DATE_FORMAT=&quot;YYYY-MM-DD HH24:MI:SS&quot;
export NLS_DATE_LANGUAGE=&quot;ENGLISH&quot;
export ORACLE_SID=czcbs
alias sqlplus='rlwrap sqlplus'
</code></pre>
</li>
<li>
<p>执行source ~/.bash_profile，使其生效</p>
</li>
</ol>
<h2 id="源oracle中创建goldengate的表空间和用户若已存在则跳过">源Oracle中创建GoldenGate的表空间和用户(若已存在则跳过)</h2>
<pre><code>sqlplus / as sysdba

SQL&gt; create tablespace cbs_ogg datafile '/data2/cbs_ogg.dbf' size 20m AUTOEXTEND ON;
Tablespace created.

SQL&gt; create user cbs_ogg identified by cbs_ogg default tablespace cbs_ogg;
User created.

SQL&gt; grant execute on utl_file to cbs_ogg;
Grant succeeded.

SQL&gt;GRANT GGS_GGSUSER_ROLE, RESOURCE, DBA, CONNECT to cbs_ogg;
</code></pre>
<h2 id="在oracle上打开事务日志">在Oracle上打开事务日志</h2>
<p>切换至oracle用户<code>sudo su - oracle</code></p>
<pre><code>sqlplus / as sysdba
</code></pre>
<pre><code>ALTER DATABASE ADD SUPPLEMENTAL LOG DATA;
ALTER DATABASE FORCE LOGGING;
SHUTDOWN IMMEDIATE
STARTUP MOUNT
ALTER DATABASE ARCHIVELOG;
ALTER DATABASE OPEN;
ALTER SYSTEM SWITCH LOGFILE;
ALTER SYSTEM SET ENABLE_GOLDENGATE_REPLICATION=TRUE SCOPE=BOTH;（此处有错误提示，先做记录）
EXIT
</code></pre>
<h2 id="目标机器上安装oracle-goldengate-for-bigdata">目标机器上安装Oracle GoldenGate for BigData</h2>
<ol>
<li>在edelivery.oracle.com上下载 Oracle GoldenGate for Big Data的安装包：12.3.1.1_ggs_Adapters_Linux_x64.zip</li>
<li>创建ggs用户，解压12.3.1.1_ggs_Adapters_Linux_x64.zip到当前用户目录下。</li>
<li>解压ggs_Adapters_Linux_x64.tar</li>
</ol>
<h2 id="目标机器上安装cdh5">目标机器上安装CDH5</h2>
<ul>
<li>
<p>CDH5安装见CDH5安装步骤</p>
</li>
<li>
<p>启动confluent</p>
<pre><code>zookeeper-server:(先启动，每个节点均启动)
/usr/bin/zookeeper-server-start /etc/kafka/zookeeper.properties &amp;
broker:(各节点均启动)
/usr/bin/kafka-server-start /etc/kafka/server.properties &amp;
schema-registry(app01节点启动):
/usr/bin/schema-registry-start /etc/schema-registry/schema-registry.properties &amp;
</code></pre>
</li>
</ul>
<h2 id="源机器的goldengate配置">源机器的GoldenGate配置</h2>
<h4 id="生成所需文件夹">生成所需文件夹</h4>
<p>在当前用户目录下执行<code>./ggsci</code></p>
<pre><code>GGSCI (db1) 1&gt; create subdirs
...
...
</code></pre>
<h3 id="globals">GLOBALS</h3>
<pre><code>GGSCI (db1) 2&gt; EDIT PARAMS ./GLOBALS
在./GLOBALS中添加如下内容：
ggschema cbs_hj
可以利用view params ./GLOBALS 查看

</code></pre>
<h3 id="将oracle-cbs下的所有表添加supplment日志组">将Oracle CBS下的所有表添加supplment日志组</h3>
<pre><code>GGSCI (db1) 3&gt; dblogin userid cbs_hj, password cbs_hj;
GGSCI (db1) 4&gt; add trandata cbs_hj.*
</code></pre>
<h3 id="编辑manager的配置">编辑Manager的配置</h3>
<pre><code>GGSCI (db1) 5&gt; EDIT PARAMS MGR

PORT 7016
ACCESSRULE, PROG *, IPADDR *, ALLOW
</code></pre>
<h3 id="启动manager">启动Manager</h3>
<pre><code>GGSCI (db1) 6&gt; start mgr

Manager started.
</code></pre>
<h3 id="查看manager的运行状态">查看Manager的运行状态</h3>
<pre><code>GGSCI (db1) 7&gt; info mgr

Manager is running (IP port db1.7016).
</code></pre>
<h2 id="目标机器的goldengate配置">目标机器的GoldenGate配置</h2>
<h4 id="生成所需文件夹-2">生成所需文件夹</h4>
<p>在当前用户下执行：<code>./ggsci</code></p>
<pre><code>GGSCI (app01) 1&gt; create subdirs
</code></pre>
<h3 id="编辑manager的配置-2">编辑Manager的配置</h3>
<pre><code>GGSCI (app01) 2&gt; EDIT PARAMS MGR
</code></pre>
<pre><code>PORT 7016
ACCESSRULE, PROG *, IPADDR *, ALLOW
</code></pre>
<h3 id="启动manager-2">启动Manager</h3>
<pre><code>GGSCI (app01) 3&gt; start mgr

Manager started.
</code></pre>
<h3 id="查看manager的运行状态-2">查看Manager的运行状态</h3>
<pre><code>GGSCI (app01) 4&gt; info mgr

Manager is running (IP port master1.7016, Process ID 16101).
</code></pre>
<h2 id="初始数据导入">初始数据导入</h2>
<h3 id="配置源机器上的extract">配置源机器上的EXTRACT</h3>
<p>添加用于初始数据导入的EXTRACT</p>
<p><code>./ggsci</code></p>
<pre><code>GGSCI (db1) 1&gt; add extract einicbs, sourceistable
</code></pre>
<p>编辑EXTRACT的配置</p>
<pre><code>GGSCI (db1) 2&gt; edit params einicbs
</code></pre>
<pre><code>EXTRACT EINICBS
userid cbs_hj, password cbs_hj
RMTHOST 10.1.6.11, MGRPORT 7016
RMTFILE ./dirdat/cb, MEGABYTES 200

table cbs_hj.party;
table cbs_hj.party_role;
···（此处添加需要导入的表名，上述两张表为示例）。
</code></pre>
<h3 id="生成cbs的define文件">生成CBS的DEFINE文件</h3>
<pre><code>GGSCI (db1) 3&gt; EDIT PARAMS cbsdef
</code></pre>
<pre><code>defsfile ./dirdef/cbs.def
userid cbs_hj, password cbs_hj
table cbs_hj.*;
</code></pre>
<p>在/home/ogg下执行</p>
<pre><code>./defgen paramfile dirprm/cbsdef.prm
</code></pre>
<p>将dirdef/cbs.def传到目标机器的/home/ggs/dirdef/cbs.def下</p>
<p><code>scp /home/ogg/dirdef/cbs.deg ggs@app01:/home/ggs/dirdef/cbs.def</code></p>
<p>改变目标机器上cbs.def的用户所属</p>
<p><code>sudo chown -R ggs:ggs /home/ggs/dirdef/cbs.def</code></p>
<h3 id="目标机器环境变量的设置">目标机器环境变量的设置</h3>
<p>添加java的环境变量</p>
<pre><code>export JAVA_HOME=/usr/java/jdk1.8.0_152(根据实际的版本来)
export JAVA_LIBDIR=/usr/share/java
export PATH=$JAVA_HOME/bin:$PATH
export LD_LIBRARY_PATH=$JAVA_HOME/jre/lib/amd64/server/
</code></pre>
<h3 id="目标机器上的replicat配置">目标机器上的REPLICAT配置</h3>
<p>添加目标机器的REPLICAT</p>
<p><code>./ggsci</code></p>
<pre><code>GGSCI (app01) 1&gt; add replicat rcbsini,exttrail ./dirdat/cb
</code></pre>
<p>编辑REPLICAT</p>
<pre><code>GGSCI (app01) 2&gt; EDIT PARAMS RCBSINI
</code></pre>
<pre><code>SPECIALRUN
END RUNTIME

EXTFILE ./dirdat/cb
TARGETDB LIBFILE libggjava.so SET property=dirprm/conf.props
SOURCEDEFS ./dirdef/cbs.def

MAP *.*, TARGET *.*;
</code></pre>
<p>编辑/home/ggs/dirprm/avro.properties, 内容如下:</p>
<p><code>vi /home/ggs/dirprm/avro.properties</code></p>
<pre><code>bootstrap.servers=localhost:9092

value.serializer=org.apache.kafka.common.serialization.ByteArraySerializer
key.serializer=org.apache.kafka.common.serialization.ByteArraySerializer
schema.registry.url=http://localhost:8081

key.converter=io.confluent.connect.avro.AvroConverter
value.converter=io.confluent.connect.avro.AvroConverter
key.converter.schema.registry.url=http://localhost:8081
value.converter.schema.registry.url=http://localhost:8081

internal.value.converter=io.confluent.connect.avro.AvroConverter
internal.key.converter=io.confluent.connect.avro.AvroConverter
#internal.value.converter.schema.registry.url=http://localhost:8081
#internal.key.converter.schema.registry.url=http://localhost:8081
replicator.topic.pool=cbs:5
</code></pre>
<p>编辑/home/ggs/dirprm/conf.props，内容如下:</p>
<p><code>vi /home/ggs/dirprm/conf.props</code></p>
<pre><code>gg.handlerlist=kafkaconnect

#The handler properties
gg.handler.kafkaconnect.type=kafkaconnect
gg.handler.kafkaconnect.kafkaProducerConfigFile=avro.properties
gg.handler.kafkaconnect.mode=tx
gg.handler.kafkaconnect.topicMappingTemplate=${fullyQualifiedTableName}
gg.handler.kafkaconnect.keyMappingTemplate=${primaryKeys}

#The formatter properties
#op_type,current_ts,op_ts,table,pos这些字段都是默认开启的
gg.handler.kafkaconnect.messageFormatting=op
gg.handler.kafkaconnect.insertOpKey=I
gg.handler.kafkaconnect.updateOpKey=U
gg.handler.kafkaconnect.deleteOpKey=D
gg.handler.kafkaconnect.truncateOpKey=T
#设置为true将所有输出字段视为字符串。设置为false，处理程序将把来源轨迹文件中相应的字段类型映射到
#最佳对应的Kafka Connect数据类型
gg.handler.kafkaconnect.treatAllColumnsAsStrings=false
#以以ISO8601格式输出当前日期
gg.handler.kafkaconnect.iso8601Format=false
gg.handler.kafkaconnect.pkUpdateHandling=abend

goldengate.userexit.timestamp=utc
goldengate.userexit.writers=javawriter

javawriter.stats.display=TRUE
javawriter.stats.full=TRUE

gg.log=log4j
gg.log.level=INFO
gg.report.time=30sec


#Set the classpath here
#gg.classpath=dirprm/:/home/ggs11/ggjava/resources/lib/*
gg.classpath=/usr/share/java/kafka-serde-tools/*:/usr/share/java/kafka/*:/usr/share/java/confluent-common/*
javawriter.bootoptions=-Xmx512m -Xms32m -Djava.class.path=.:ggjava/ggjava.jar:./dirprm
</code></pre>
<h3 id="启动extract">启动EXTRACT</h3>
<ol>
<li>
<p>在源机器上执行</p>
<p><code>./ggsci</code></p>
</li>
</ol>
<pre><code>GGSCI (db1) 1&gt; start einicbs
</code></pre>
<h3 id="启动replicat">启动REPLICAT</h3>
<ol>
<li>在/home/ggs下执行:</li>
</ol>
<pre><code>[ggs@app1 ~]$ ./replicat paramfile dirprm/rcbsini.prm
</code></pre>
<h3 id="检查结果">检查结果</h3>
<h4 id="通过kafka检查是否生成对应的topic">通过kafka检查是否生成对应的topic</h4>
<pre><code>kafka-topics --list --zookeeper localhost:2181

</code></pre>
<h4 id="检查kafkatopic的偏移量检查此时数据是否导入">检查kafkatopic的偏移量，检查此时数据是否导入</h4>
<pre><code>kafka-run-class kafka.tools.GetOffsetShell --broker-list localhost:9092 --topic PARTY --time -1
kafka-run-class kafka.tools.GetOffsetShell --broker-list localhost:9092 --topic PARTY --time -2
</code></pre>
<h2 id="事务的同步">事务的同步</h2>
<p>需要先把ogg用户组改成oracle的用户组所属</p>
<pre><code>usermod -G oinstall ogg
usermod -g oinstall ogg

</code></pre>
<p>退出用户重新进入方可生效</p>
<h3 id="源机器的extract配置">源机器的EXTRACT配置</h3>
<p><code>./ggsci</code></p>
<pre><code>GGSCI (db1) 1&gt; EDIT PARAMS EXTCBS
</code></pre>
<pre><code>EXTRACT extcbs
USERID cbs_hj, PASSWORD cbs_hj
EXTTRAIL ./dirdat/rt
table cbs_hj.party;
table cbs_hj.party_role;

</code></pre>
<pre><code>GGSCI (db1) 2&gt; add extract extcbs, tranlog,begin now
EXTRACT added.

</code></pre>
<pre><code>GGSCI (db1) 3&gt; add exttrail ./dirdat/rt, extract extcbs
EXTTRAIL added.

</code></pre>
<pre><code>GGSCI (db1) 4&gt; start extcbs

Sending START request to MANAGER ...
EXTRACT EXTCBS starting

GGSCI (db1) 5&gt; info all

Program     Status      Group       Lag at Chkpt  Time Since Chkpt

MANAGER     RUNNING
EXTRACT     RUNNING     EXTCBS      00:00:31      00:00:01


</code></pre>
<h3 id="源机器的data-pump的配置">源机器的Data Pump的配置</h3>
<pre><code>GGSCI (db1) 6&gt; EDIT PARAMS CBSDP
</code></pre>
<pre><code>EXTRACT CBSDP
USERID cbs_hj, PASSWORD cbs_hj
RMTHOST 10.1.6.11, MGRPORT 7016
RMTTRAIL ./dirdat/rt
table cbs_hj.party;
table cbs_hj.party_role;

</code></pre>
<pre><code>GGSCI (db1) 7&gt; ADD EXTRACT CBSDP, EXTTRAILSOURCE ./dirdat/rt, begin now
</code></pre>
<pre><code>GGSCI (db1) 8&gt; ADD RMTTRAIL ./dirdat/rt, EXTRACT CBSDP, MEGABYTES 5
GGSCI (db1) 9&gt; start cbsdp
</code></pre>
<pre><code>GGSCI (db1) 10&gt; info all

Program     Status      Group       Lag at Chkpt  Time Since Chkpt

MANAGER     RUNNING
EXTRACT     RUNNING     CBSDP       00:00:00      00:00:46
EXTRACT     RUNNING     EXTCBS      00:00:00      00:00:08

</code></pre>
<p>注：若有服务启动失败，通过<code>vi ggserr.log</code> 来查看</p>
<h3 id="目标机器的replicat-的配置">目标机器的REPLICAT 的配置</h3>
<p><code>./ggsci</code></p>
<pre><code>GGSCI (app01) 1&gt; EDIT PARAMS rcbs
</code></pre>
<pre><code>REPLICAT rcbs
TARGETDB LIBFILE libggjava.so SET property=dirprm/conf.props
SOURCEDEFS ./dirdef/cbs.def
REPORTCOUNT EVERY 1 MINUTES, RATE
GROUPTRANSOPS 1000
MAP *.*, TARGET *.*;

</code></pre>
<pre><code>GGSCI (app01) 2&gt; add replicat rcbs,exttrail ./dirdat/rt

</code></pre>
<pre><code>GGSCI (app01) 3&gt; start rcbs
GGSCI (app01) 4&gt; info all

Program     Status      Group       Lag at Chkpt  Time Since Chkpt

MANAGER     RUNNING
REPLICAT    RUNNING     RCBS        00:00:00      00:00:00

</code></pre>
<p>注：若配置文件发生改变，重启mgr，rcbs等服务</p>
<h2 id="数据同步导入">数据同步导入</h2>
<ul>
<li>
<p>进入impala创建对应的表结构，这里两张表为party，party_role为例(在master01节点执行)：</p>
<ul>
<li><code>impala-shell</code></li>
</ul>
</li>
<li>
<p>创建数据库</p>
<ul>
<li><code>[master01:21000] &gt; CREATE DATABASE IF NOT EXISTS CBS_HJ;</code></li>
</ul>
</li>
<li>
<p>建表</p>
<pre><code>create table if not exists cbs_hj.party(
ID INT,
PARTY_TYPE_CODE STRING,
COMMENTS STRING,
PRIMARY KEY(ID)
)PARTITION BY HASH (ID) PARTITIONS 16 STORED AS KUDU;

create table if not exists cbs_hj.party_role(
ID INT,
ROLE_TYPE_CODE STRING,
PARTY_ID INT,
PARTY_ROLE_NO STRING,
FROM_DATE STRING,
THRU_DATE STRING,
PRIMARY KEY(ID)
)PARTITION BY HASH (ID) PARTITIONS 16 STORED AS KUDU;

</code></pre>
</li>
<li>
<p>数据从kafka获取就不在此赘述</p>
</li>
</ul>
<h2 id="附录">附录</h2>
<p>配置文件的参数说明：</p>
<h4 id="confprops">conf.props</h4>
<ul>
<li>
<p>gg.handlerlist：需要使用的处理程序列表的命名</p>
</li>
<li>
<p>gg.handler.name.type：用于选择Kafka Connect处理程序的配置，此处配置应该填写kafkaconnect</p>
</li>
<li>
<p>gg.handler.name.kafkaProducerConfigFile：kafkaconnect配置文件的路径</p>
</li>
<li>
<p>gg.handler.name.mode：可选参数为op以及tx，分为两种不同的模式，处理效率也不相同</p>
</li>
<li>
<p>gg.handler.name.topicMappingTemplate：生成topic的命名所对应的模板消息，例如：${fullyQualifiedTableName}就解析为完全的表名，并用.自动分隔。</p>
<p>${tableName}解析为短表名。</p>
<p>更多请参考：https://docs.oracle.com/goldengate/bd123110/gg-bd/GADBD/using-kafka-connect-handler.htm#GADBD-GUID-A87CAFFA-DACF-43A0-8C6C-5C64B578D606</p>
</li>
<li>
<p>gg.handler.name.keyMappingTemplate：在运行时解析Kafka消息键值的模板字符串，模板类型参考：https://docs.oracle.com/goldengate/bd123110/gg-bd/GADBD/using-kafka-connect-handler.htm#GADBD-GUID-A87CAFFA-DACF-43A0-8C6C-5C64B578D606</p>
</li>
<li>
<p>gg.handler.name.messageFormatting：可选参数为row以及op，op类型会让Kafka消息中表字段以及op_type等消息区分开，表中的内容会被after字段包括，例如：</p>
<pre><code>u'after': {u'PARTY_TYPE_CODE': None, u'ID': 17045.0, u'COMMENTS': u'test11'}, 
u'op_type': u'U', 
u'pos': u'00000000010000001477', 
u'op_ts': u'2018-01-20 07:00:50.260766', 
u'current_ts': u'2018-01-20 15:00:56.566000', 
</code></pre>
<p>而row格式即让所有消息均在一个dict中，例如：</p>
<pre><code>u'FROM_DATE': u'2015-08-14 00:00:00', u'PARTY_ROLE_NO': u'047353', 
u'op_type': u'I', u'pos': u'-0000000000000000001', 
u'THRU_DATE': None, u'op_ts': u'2018-01-19 07:19:29.192319', 
u'PARTY_ID': 7.0, u'current_ts': u'2018-01-20 12:06:53.253002', u'table': u'CBS_HJ.PARTY_ROLE', u'ID': 7.0, u'ROLE_TYPE_CODE': u'BRANCH'
</code></pre>
</li>
<li>
<p>gg.handler.name.insertOpKey：op_type字段中插入时候的提示字段，默认为‘I’</p>
</li>
<li>
<p>gg.handler.name.updateOpKey：op_type字段中更新时候的提示字段，默认为‘U’</p>
</li>
<li>
<p>gg.handler.name.deleteOpKey：op_type字段中删除时候的提示字段，默认为‘D’</p>
</li>
<li>
<p>gg.handler.name.truncateOpKey：op_type字段中资料清除时候的提示字段，默认为‘T’</p>
</li>
<li>
<p>gg.handler.name.treatAllColumnsAsStrings：选择true则将所有字段视为字符串，默认为false，若为false则会使用最佳映射</p>
</li>
<li>
<p>gg.handler.name.iso8601Format：默认为false，如果为true，则以iso8601格式输出日期</p>
</li>
<li>
<p>gg.handler.name.pkUpdateHandling：仅当gg.handler.name.messageFormatting=row时适用</p>
</li>
<li>
<p>gg.classpath：如果是Apache Kafka，则路径示例:</p>
<pre><code>gg.classpath=dirprm:{kafka_install_dir}/libs/*
</code></pre>
<p>如果是Confluent IO Kafka，示例路径如下：</p>
</li>
</ul>
<pre><code>gg.classpath = confluent_install_dir / share / java / kafka-serde-tools / *：{ confluent_install_dir } / share / java / kafka / *：{ confluent_install_dir } / share / java / confluent-common / *
</code></pre>
<h4 id="avroproperties">avro.properties</h4>
<pre><code>bootstrap.servers=localhost:9092

value.serializer=org.apache.kafka.common.serialization.ByteArraySerializer
key.serializer=org.apache.kafka.common.serialization.ByteArraySerializer
schema.registry.url=http://localhost:8081

key.converter=io.confluent.connect.avro.AvroConverter
value.converter=io.confluent.connect.avro.AvroConverter
key.converter.schema.registry.url=http://localhost:8081
value.converter.schema.registry.url=http://localhost:8081
</code></pre>
<p>使用avro格式进行传输，并连接schema_registry</p>
]]></content>
    </entry>
</feed>